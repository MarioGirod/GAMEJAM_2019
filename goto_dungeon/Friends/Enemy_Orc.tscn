[gd_scene load_steps=4 format=2]

[ext_resource path="res://CharacterScenes/Orc.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

func filter_array(arr:Array, v):
	var result = []
	for index in range(arr.size()):
		if arr[index] == v :
			result.append(index)
	return result		

# Called when the node enters the scene tree for the first time.
func _ready():
	#_idleWalk();
	pass
	
var idle_walk_timer = 0

func _physics_process(delta):
	if die_active:
		pass
	elif attack_active:
		attack(attack_target)
	else:
		var target = choose_target_in_room()
		if target:
			var speed = choose_walk_speed(target)
			var dist = global_position.distance_to(target.global_position)		
			
			if dist < 17:
				attack(target)
			else:
				move_to_target(target, speed)
		else: 	
			idle_walk_timer += delta		
			idle_walk()

		
func move_to_target(target, speed):
	var target_dir = \"\"
	var target_dir_x = round(target.global_position.x - global_position.x)
	var target_dir_y = round(target.global_position.y - global_position.y)

	if target_dir_x > 0 && target_dir_y > 0:
		target_dir = \"RIGHTDOWN\"	
	elif target_dir_x > 0 && target_dir_y < 0:
		target_dir = \"RIGHTUP\"	
	elif target_dir_x < 0 && target_dir_y > 0:
		target_dir = \"LEFTDOWN\"	
	elif target_dir_x < 0 && target_dir_y < 0:
		target_dir = \"LEFTUP\"		
	elif target_dir_x == 0 && target_dir_y > 0:
		target_dir = \"DOWN\"	
	elif target_dir_x == 0 && target_dir_y < 0:
		target_dir = \"UP\"	
	elif target_dir_x > 0 && target_dir_y == 0:
		target_dir = \"RIGHT\"	
	elif target_dir_x < 0 && target_dir_y == 0:
		target_dir = \"LEFT\"		
	move(speed, target_dir)
	
func scan_for_targets(n):
	var targets = get_tree().get_nodes_in_group('Characters')
	var targeted = []
	for target in targets:
		var dist = Vector2(target.global_position.x - global_position.x,target.global_position.y - global_position.y).length() 
		if dist < n :
			var space_state = get_world_2d().direct_space_state
			var result = space_state.intersect_ray(global_position, target.global_position, [self], 6)
			if not result:
				targeted.append(target)
	return targeted 	
	
func choose_target_in_room():
	# Scan for targets in n range
	var in_range = 80
	var targets = scan_for_targets(in_range)
	
	#if there is a target in range decide on target
	if targets :
		# if its only one target, return this target
		if targets.size() == 1 :
			return targets[0]
		else :	
			# if there is more than one target in range, 			
			var target_types = []
			var target_distances = []
			#iterate over and test for character type
			for elem in targets:
				var distance = global_position.distance_to(elem.global_position)	
				target_distances.append(distance)
				if not target_types.has(elem.character_type):
					target_types.append(elem.character_type)
			# a) all targets are same? -> choose nearest target
			
			var target_distances_min = target_distances.min()
			var target_types_min = target_types.min()
			var types_count = target_types.count(target_types_min)
			var index_count = target_distances.count(target_distances_min)
			
			if target_types.size() == 1 || target_distances_min < 20 :
				if index_count == 1 :
					var index_target = target_distances.find(target_distances_min)
					return targets[index_target]
				else :
					# if still same, decide randomly
					var rest_targets = filter_array(target_distances, target_distances_min)
					return targets[rest_targets[randi()%rest_targets.size()]]
						
			else :	
				#follow the character with the smallest priority	
				if types_count == 1 :
					var index_target = target_types.find(target_types_min)
					return targets[index_target]
				else :
					var rest_targets_index = filter_array(target_types, target_types_min)	
					var rest_targets_distance = []
					for i in rest_targets_index:
						rest_targets_distance.append(target_distances[i])
					var rest_index = rest_targets_distance.find(rest_targets_distance.min())	
					return targets[rest_index]
					
			# b) if targets are different choose target with highest priority
				return targets[randi()%targets.size()]
				# priority is a value given by distance and importance
				# enemies that are in striking range should always be targeted (defense line)
				# enemies that are naked should always be targeted (interest)	
			
	else:
		 return null

func choose_walk_speed(target):
	var speed = 8
	if target.character_type == CharacterType.NAKED :
		speed = 16		
	elif target.character_type == CharacterType.DIVERS :
		speed = 6
				
	return speed

# Character walks one step in random direction (up, left, right, down)
func idle_walk():
	var idle_speed = 8
# 1. Character should automatically walk and look to the right
	if idle_walk_timer <= 3 :
		move(idle_speed, 'RIGHT')
	else :
		move(idle_speed, 'LEFT')
	if idle_walk_timer >= 6:
		idle_walk_timer = 0;

var direction = 'right'

func move(speed, dir):
	var move = Vector2(0,0)
	
	var diagonal_speed = round(speed / 1.414)
	var base_speed = 8.0
	
	if dir == 'RIGHTUP':
		move.x += 1 * diagonal_speed
		move.y -= 1 * diagonal_speed
		direction = 'right'
	
	if dir == 'LEFTDOWN':
		move.x -= 1 * diagonal_speed
		move.y += 1 * diagonal_speed
		direction = 'left'	
	
	if dir == 'RIGHTDOWN':
		move.x += 1 * diagonal_speed
		move.y += 1 * diagonal_speed
		direction = 'right'
			
	if dir == 'LEFTUP':	
		move.x -= 1 * diagonal_speed	
		move.y -= 1 * diagonal_speed
		direction = 'left'
		
	if dir == 'RIGHT':	
		move.x += 1 * speed
		direction = 'right'
	
	if dir == 'LEFT':
		move.x -= 1 * speed
		direction = 'left'
		
	if dir == 'DOWN':
		move.y += 1 * speed
		
	if dir == 'UP':	
		move.y -= 1 * speed

		
	flip_sprite($Orc/Sprite, direction)	
	move_and_slide(move)
	
	$Orc/AnimationPlayer.playback_speed = ((speed/(2*base_speed)) + 0.5)
	$Orc/AnimationPlayer.play(\"Walk\")

func flip_sprite(sprite, direction):
	if	direction == 'left' : 
		sprite.flip_h = true
	else :
		sprite.flip_h = false

func turn_to_target(target):
	if target.position.x >= $Orc/Sprite.position.x:
		flip_sprite($Orc/Sprite, 'right')
	else :
		flip_sprite($Orc/Sprite, 'left')	
	
signal attacked_player

var attack_target = null
var attack_active = false
var attack_cooldown = 1.5
onready var attack_cooldown_timer = attack_timer()

func attack_timer():
	var timer = Timer.new()
	timer.wait_time = attack_cooldown
	timer.one_shot = true
	add_child(timer)
	return timer

func attack(target):
	if not attack_cooldown_timer.time_left:
		attack_active = true
		attack_target = target
		
		var player = $Orc/AnimationPlayer
		player.playback_speed = 2
		player.animation_set_next(\"Attack\", \"Idle\")
		player.play(\"Attack\")
		
		attack_cooldown_timer.start()
		
		var ret = yield(player, \"animation_changed\")
		
		attack_active = false
		attack_target = null
		emit_signal('attacked_player', target, 'Orc_Attack')

		yield(attack_cooldown_timer, \"timeout\")

func on_attacked():
	die()

signal dead
var die_active = false
var is_dead = false

func die():
	if is_dead: return

	die_active = true
	var player = $Orc/AnimationPlayer
	player.playback_speed = 1
	player.play(\"Die\")
	yield(player, \"animation_finished\")
	is_dead = true

	emit_signal(\"dead\")

func idle():
	$Orc/AnimationPlayer.playback_speed = 1
	$Orc/AnimationPlayer.play(\"Idle\")
	"

[sub_resource type="CapsuleShape2D" id=2]
radius = 7.58712
height = 2.03262

[node name="Enemy_Orc" type="KinematicBody2D" groups=[
"Enemies",
]]
collision_layer = 16
collision_mask = 23
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="." groups=[
"Enemies",
]]
position = Vector2( -0.582023, -0.0466013 )
shape = SubResource( 2 )

[node name="Orc" parent="." instance=ExtResource( 1 )]
position = Vector2( 0.0852547, 0.0852623 )
