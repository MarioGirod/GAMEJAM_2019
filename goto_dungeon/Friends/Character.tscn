[gd_scene load_steps=5 format=2]

[ext_resource path="res://CharacterScenes/NakedGuy.tscn" type="PackedScene" id=1]
[ext_resource path="res://Sprites/arrows.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

export var player = \"p1\"
export var speed = 60
export var character_type = CharacterType.NAKED
export var naked_guy = preload(\"res://CharacterScenes/NakedGuy.tscn\")

var death_scene_path = \"res://Death.tscn\"
var character_item: KinematicBody2D = null
var look_direction = Vector2.RIGHT

func _ready():
	var color = get_color();
	self.get_node(\"Highlighter\").modulate = color;

func _physics_process(delta):
	if input_drop_character():
		choose_animation(Vector2.ZERO)
	else:
		var move_vec = get_move_vec_for_player(player)
		look_direction = get_look_direction(move_vec)
		move_and_slide(move_vec * speed)
		flip_sprite(move_vec)
		choose_animation(move_vec)

# called from items too
func change_character_with_item(item: KinematicBody2D, scene: PackedScene, type):
	if character_item == null:
		character_item = item
		item.get_parent().remove_child(item)
		var node = scene.instance()
		change_character(node, type)

func get_color():
	var color = Color(0, 1, 0, 1); # lime default
	if (self.name == 'Character'):
		color = Color(1, 1, 0, 1); # yellow
	elif (self.name == 'Character2'):
		color = Color( 0, 1, 1, 1 ); # aqua
	elif (self.name == 'Character3'):
		color = Color( 1, 0, 0, 1 ); # red
	return color;

func change_character(node: Node2D, type):
	var before = $NakedGuy

	node.name = \"NakedGuy\"
	node.transform = before.transform
	node.get_node(\"Sprite\").flip_h = before.get_node(\"Sprite\").flip_h
	character_type = type

	remove_child(before)
	add_child(node)

func input_drop_character():
	if Input.is_action_just_pressed(player + \"_drop\") and character_type != CharacterType.NAKED:
		drop_character()
		throw_character_item()
		return true
	return false

func drop_character():
	var node = naked_guy.instance()
	change_character(node, CharacterType.NAKED)

func throw_character_item():
	if character_item:
		var node = character_item.duplicate()
		character_item = null
		get_parent().add_child(node)
		var from = position + Vector2.UP * 8
		var dir = look_direction
		node.throw_it(self, from, dir)


func get_look_direction(vec: Vector2):
	if vec.x < 0: return Vector2.LEFT
	if vec.x > 0: return Vector2.RIGHT
	if vec.y < 0: return Vector2.UP
	if vec.y > 0: return Vector2.DOWN
	return look_direction

func choose_animation(vec: Vector2):
	if vec.x == 0 and vec.y == 0:
		$NakedGuy/AnimationPlayer.play(\"Idle\")
	else:
		$NakedGuy/AnimationPlayer.play(\"Walk\")

func flip_sprite(vec: Vector2):
	if vec.x < 0:
		$NakedGuy/Sprite.flip_h = true
	if vec.x > 0:
		$NakedGuy/Sprite.flip_h = false

func get_move_vec_for_player(player):
	var move_vec = Vector2(0, 0)
	if Input.is_action_pressed(player + \"_up\"):
		move_vec += Vector2.UP
		self.get_node(\"Highlighter\").frame = 0
	if Input.is_action_pressed(player + \"_down\"):
		move_vec += Vector2.DOWN
		self.get_node(\"Highlighter\").frame = 1
	if Input.is_action_pressed(player + \"_left\"):
		move_vec += Vector2.LEFT
		self.get_node(\"Highlighter\").frame = 2
	if Input.is_action_pressed(player + \"_right\"):
		move_vec += Vector2.RIGHT
		self.get_node(\"Highlighter\").frame = 3
	move_vec = move_vec.normalized()
	
	# test death
	if Input.is_action_just_pressed('ui_select'):
		globals.switch_scene(death_scene_path)
		#pass
	return move_vec
	
"

[sub_resource type="CapsuleShape2D" id=2]
radius = 7.0
height = 0.718109

[node name="Character" type="KinematicBody2D"]
collision_mask = 23
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="NakedGuy" parent="." instance=ExtResource( 1 )]
position = Vector2( 0.530334, -8.66206 )

[node name="Highlighter" type="Sprite" parent="."]
position = Vector2( 1.20352, 8.62366 )
scale = Vector2( 0.299722, 0.0891969 )
texture = ExtResource( 2 )
hframes = 4
